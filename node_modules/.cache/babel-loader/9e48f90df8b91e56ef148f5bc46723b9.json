{"ast":null,"code":"import _slicedToArray from\"/home/jobilite/Desktop/hostel_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/home/jobilite/Desktop/hostel_client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useReducer,createContext}from'react';import jwtDecode from'jwt-decode';//The AuthContext is used for our component to access our context\n//AuthProvide is used to wrap all our application so that it will have access to this provider or to the function in the context \nimport{jsx as _jsx}from\"react/jsx-runtime\";var initialState={user:null};if(localStorage.getItem('jwtToken')){//To check if the token is expired\nvar decodedToken=jwtDecode(localStorage.getItem('jwtToken'));if(decodedToken.exp*1000<Date.now()){localStorage.removeItem('jwtToken');}else{initialState.user=decodedToken;}}var AuthContext=/*#__PURE__*/createContext({user:null,login:function login(userData){},logout:function logout(){}});function authReducer(state,action){switch(action.type){case'LOGIN':return _objectSpread(_objectSpread({},state),{},{user:action.payload});case'LOGOUT':return _objectSpread(_objectSpread({},state),{},{user:null});default:return state;}}function AuthProvider(props){var _useReducer=useReducer(authReducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];console.log(state);function login(userData){localStorage.setItem('jwtToken',userData.token);dispatch({type:'LOGIN',payload:userData});}function logout(){localStorage.removeItem('jwtToken');dispatch({type:'LOGOUT'});}return/*#__PURE__*/_jsx(AuthContext.Provider,_objectSpread({value:{user:state.user,login:login,logout:logout}},props));}export{AuthContext,AuthProvider};","map":{"version":3,"sources":["/home/jobilite/Desktop/hostel_client/src/context/auth.js"],"names":["React","useReducer","createContext","jwtDecode","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","console","log","setItem","token"],"mappings":"qTAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,aAA5B,KAAiD,OAAjD,CACA,MAAOC,CAAAA,SAAP,KAAsB,YAAtB,CAEA;AACA;2CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,IAAI,CAAE,IADW,CAArB,CAKA,GAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,CAAoC,CAChC;AACA,GAAMC,CAAAA,YAAY,CAAIL,SAAS,CAACG,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA/B,CAGA,GAAGC,YAAY,CAACC,GAAb,CAAmB,IAAnB,CAA0BC,IAAI,CAACC,GAAL,EAA7B,CAAwC,CACpCL,YAAY,CAACM,UAAb,CAAwB,UAAxB,EACH,CAFD,IAEM,CACFR,YAAY,CAACC,IAAb,CAAoBG,YAApB,CACH,CAEJ,CAID,GAAMK,CAAAA,WAAW,cAAGX,aAAa,CAAC,CAC9BG,IAAI,CAAE,IADwB,CAE9BS,KAAK,CAAE,eAACC,QAAD,CAAc,CAAE,CAFO,CAG9BC,MAAM,CAAE,iBAAM,CAAE,CAHc,CAAD,CAAjC,CAMA,QAASC,CAAAA,WAAT,CAAqBC,KAArB,CAA4BC,MAA5B,CAAoC,CAChC,OAAQA,MAAM,CAACC,IAAf,EACI,IAAK,OAAL,CACI,sCACOF,KADP,MAEIb,IAAI,CAACc,MAAM,CAACE,OAFhB,GAIJ,IAAK,QAAL,CACI,sCACOH,KADP,MAEIb,IAAI,CAAE,IAFV,GAKJ,QACI,MAAOa,CAAAA,KAAP,CAbR,CAgBH,CAED,QAASI,CAAAA,YAAT,CAAsBC,KAAtB,CAA4B,CACxB,gBAA0BtB,UAAU,CAACgB,WAAD,CAAcb,YAAd,CAApC,4CAAMc,KAAN,iBAAaM,QAAb,iBACAC,OAAO,CAACC,GAAR,CAAYR,KAAZ,EAEA,QAASJ,CAAAA,KAAT,CAAeC,QAAf,CAAwB,CACpBT,YAAY,CAACqB,OAAb,CAAqB,UAArB,CAAiCZ,QAAQ,CAACa,KAA1C,EACAJ,QAAQ,CAAC,CACLJ,IAAI,CAAE,OADD,CAELC,OAAO,CAACN,QAFH,CAAD,CAAR,CAIH,CAED,QAASC,CAAAA,MAAT,EAAiB,CACbV,YAAY,CAACM,UAAb,CAAwB,UAAxB,EACAY,QAAQ,CAAC,CACLJ,IAAI,CAAC,QADA,CAAD,CAAR,CAGH,CAED,mBACI,KAAC,WAAD,CAAa,QAAb,gBACI,KAAK,CAAE,CAAEf,IAAI,CAAEa,KAAK,CAACb,IAAd,CAAoBS,KAAK,CAALA,KAApB,CAA2BE,MAAM,CAANA,MAA3B,CADX,EAEQO,KAFR,EADJ,CAMH,CAED,OAASV,WAAT,CAAsBS,YAAtB","sourcesContent":["import React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\n\n//The AuthContext is used for our component to access our context\n//AuthProvide is used to wrap all our application so that it will have access to this provider or to the function in the context \n\nconst initialState = {\n    user: null\n}\n\n\nif(localStorage.getItem('jwtToken')){\n    //To check if the token is expired\n    const decodedToken  = jwtDecode(localStorage.getItem('jwtToken'))\n\n\n    if(decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    }else {\n        initialState.user = decodedToken\n    }\n\n}\n\n\n\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {},\n    logout: () => {}\n})\n\nfunction authReducer(state, action) {\n    switch (action.type) {\n        case 'LOGIN':\n            return {\n                ...state,\n                user:action.payload\n            }\n        case 'LOGOUT':\n            return {\n                ...state,\n                user: null\n            }\n    \n        default:\n            return state\n    }\n    \n}\n\nfunction AuthProvider(props){\n    const[state, dispatch]  = useReducer(authReducer, initialState);\n    console.log(state)\n\n    function login(userData){\n        localStorage.setItem('jwtToken', userData.token)\n        dispatch({\n            type: 'LOGIN',\n            payload:userData\n        })\n    }\n\n    function logout(){\n        localStorage.removeItem('jwtToken');\n        dispatch({\n            type:'LOGOUT'\n        })\n    }\n\n    return (\n        <AuthContext.Provider \n            value={{ user: state.user, login, logout}}\n            {...props}\n            />\n    )\n}\n\nexport { AuthContext, AuthProvider}"]},"metadata":{},"sourceType":"module"}